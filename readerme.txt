
文件路径
    $ pwd
    /Users/bytedance/PycharmProjects/Web-django
    $ django-admin startproject demo

运行
   $ python manage.py runserver


5、创建工程
    1. cd 项目文件夹
    2. django-admin startproject 项目名称
    3. 运行
        python manager.py runserver

6、创建子应用APP

1.创建子应用
    cd 工程项目
    $ python manage.py startapp demoapp
    
2.注册应用
    seetings.py    --配置文件
    INSTALLED_APPS = [
    # 注册子应用
    'demoapp.apps.DemoappConfig'
    ]

7、创建视图
django的视图是定义在子应用的views.py中的
  1. 创建视图
  打开创建的应用模块，在views.py中编写视图代码
from django.http.response import HttpResponse

# 创建视图函数
def index(request):
    “”“
    index视图
    :param request：包含了请求信息的请求对象
    :return：响应对象
    ”“”
    # 返回响应对象
    return HttpResponse('这是第一个子应用的视图函数功能展示')
  2. 路由配置
    a.子应用
        创建urls.py
        定义路由
    b.工程总路由
        添加子路由

8、路由说明
1. 路由定义方式2
    a. 总路由-子路由
    b. 直接在总路由配置
2. 路由解析顺序
    从上到下匹配
    注意避免屏蔽路由
3. 路由命名
    name
4. reverse反解析
    a. 有namespace  
        reverse("namespace:name")
    b. 只有name
        reverse("name")

9、配置文件
1. base_dir：项目根路径
2. debug
    调试模式
    上线改成False
3. 本地化设置
    zh-hans
    Asia/Shanghai

10、静态文件
1. static_url：路由名字
2. staticfiles_dirs：静态资源文件夹的名字

3. staticfiles_dir：存放查找静态文件的目录
    static_url：访问静态文件的URL前缀

notes：django仅在调试模式下(debug=true)能对外提供静态文件
       当debug=false工作在生产模式时，django不再对外提供静态文件，需要用collectstatic命令
       来收集静态文件并交由其他静态文件服务器来提供。

11、请求对象request
1. 利用http协议向服务器传参有几种途径：
    a. 提取URL的特定部分，如/weather/beijing/2018，可以在服务端的路由中用正则表达式截取
    b. 查询字符串(query string)，形如key1=value1&key2=value2;
    c. 请求体（body）中发送的数据，比如表单数据、json、xml
    d. 在http报文的头（header）中

2. 传参的4种方式
    a.URL路径传参
    b.查询字符串
    c.请求体
    d.请求头header

2.1 URL 路径参数
    在定义路由URL时，可以使用正则表达式提取参数的方法从URL中获取请求参数，Django会将提取的参数直接传递到视图的传入参数中
    a. 未命名参数按定义顺序传递
    b. 命名参数按名字传递

    from django.urls import path
    from . import views

    urlpatterns = [
        path("articles/2003/", views.special_case_2003),
        path("articles/<int:year>/", views.year_archive),
        path("articles/<int:year>/<int:month>/", views.month_archive),
        path("articles/<int:year>/<int:month>/<slug:slug>/", views.article_detail),
    ]

    路径转换器：下面的路径转换器在默认情况下是有效的：
        str - 匹配除了 '/' 之外的非空字符串。如果表达式内不包含转换器，则会默认匹配字符串。
        int - 匹配 0 或任何正整数。返回一个 int 。
        slug - 匹配任意由 ASCII 字母或数字以及连字符和下划线组成的短标签。比如，building-your-1st-django-site 。
        uuid - 匹配一个格式化的 UUID 。为了防止多个 URL 映射到同一个页面，必须包含破折号并且字符都为小写。比如，075194d3-6885-417e-a8a8-6c931e272f00。返回一个 UUID 实例。
        path - 匹配非空字段，包括路径分隔符 '/' 。它允许你匹配完整的 URL 路径而不是像 str 那样匹配 URL 的一部分。

2.2 查询字符串query string
    定义在django.http.QueryDict：支持一键多值
    HttpRequest对象的属性GET、POST都是QueryDict类型的对象
    与python字典不同，QueryDict类型的对象用来处理同一个健带有多个值的情况
    a. 方法get()：根据键获取值
    b. 方法getlist()：根据键获取值，值以列表返回
    重要：查询字符串不区分请求方式，即假使客户端进行post方式的请求，依然可以通过request.get获取请求中的查询字符串数据

    获取请求路径中的查询字符串参数（形如?k1=v1&k2=v2），可以通过request.Get属性获取，返回queryDict对象
    ?key1=value1&key2=value2
    request.GET  
        get('key')  
        getlist('key')
        QueryDict：支持一键多值

2.3 请求体
    请求体数据格式不固定，可以是表单类型字符串，可以是JSON字符串，可以是XML字符串，应区别对待
    可以发送请求体数据的请求方式有post、put、patch、delete
    django默认开启了CSRF防护，会对上述请求方式进行CSRF防护验证，在测试时可以关闭CSRF防护机制，方法为在settings.py文件中注释掉CSRF中间件
    # 中间层 中间件
    MIDDLEWARE = [
    # 'django.middleware.csrf.CsrfViewMiddleware',
    ]

1. 表单类型 Form Data
    前端发送的表单类型的请求数据，可以通过request.post属性获取，返回querydict对象
    重要：request.post只能用来获取post方式的请求体表单数据
2. 非表单类型 Non-Form Data
    非表单类型的请求体数据，Django无法自动解析，可以通过request.body属性获取最原始的请求体数据，自己按照请求体格式（json、xml）进行解析。
    request.body返回bytes类型






    admin 000000






B站课程
快速使用
    在django中要提供数据展示给用户，需要完成3个步骤：
    1.创建子应用
    2.在子应用的视图文件views.py中编写视图函数
    3.把视图函数和url进行绑定注册到django项目
        用户就可以通过url地址访问，用户访问的时候，django自动根据url地址执行对应的视图函数

    1、创建子应用
        python manage.py startapp 子应用名称（目录）
        django-admin startapp 子应用名称
        子应用的名称将来会作为目录名而存在，务必按变量名的命名规则来创建，不能出现特殊符号，也不是不能出现中文等多字节的字符
        更不能以数字开头
    2、在子应用的视图文件中编写视图函数
        goods/views.py，代码
        from django.http.response import HttpResponse
        def index(request):
        # 业务代码，调用数据，for循环之类的
            data = "okkkkk!!!"
            return HttpResponse(data)
    3、绑定路由和视图的映射关系
        demo/urls.py，代码
        from django.contrib import admin
        from django.urls import path, include
        import demoapp.views
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('index', index),
        ]
    可以通过http://127.0.0.1:8000拼接url地址indeex来访问视图函数

网络知识
    http协议
    基本概念：http协议，即超文本传输协议，无状态网络应用协议，http协议构建于TCP/IP协议族之上，属于应用层协议。主要用于传输与超文本相关的资源文件，如HTML网页，css、js、图片、视频，音频等
    直接构建于TCP协议之上，没有进行加密传输数据的是HTTP协议，默认通信端口是80端口，常用的端口有：3000，5000，8000，8080等
    而构建于TLS或SSL协议之上，对数据使用SSL加壳加密传输数据的是HTTPS协议，默认通信端口是443端口，常用端口8443

    请求方法
    http请求方法（HTTP Request Method），表示客户端希望对服务器指定资源进行哪一种类型的操作，存在多种HTTP请求方法表达增删改。常见请求方法如下：
    请求方法       描述                                                                   报文中是否包含请求体
    get      表示客户端希望从服务器中获取或下载资源信息                                            false
    post     表示客户端希望上传文件或通过请求在服务区创建资源信息                                    True
    put      表示客户端希望修改或更新服务器资源（表示修改全部资源信息，例如数据表的一整个记录）           True
    patch    表示客户端希望修改或更新服务器资源（表示修改部分资源信息，例如数据表的一个记录里面某个属性值） True
    delete   表示客户端希望删除或废弃服务器资源                                                   false
    option   表示客户端希望获取服务器所支持的请求方法列表                                           false
    head     表示客户端希望获取服务器支持的跨域地址列表                                             false

    请求路径
    表示远程web服务器的一个可访问资源，一般就是代表的一个服务器具体文件或数据表中的记录信息，或一个服务端里面的函数或方法

    请求头
    HTTP请求头（Request Head），主要对客户端请求操作进行限制条件并补充说明。常见的标准HTTP请求头如下：
    选项                描述                                                              值
    Host           指定客户端请求的服务器的域名和端口号                                   www.baidu.com
    Content-Type   告诉服务器，客户端请求携带的请求体数据的媒体类型信息(MIME类型)
    User-Agent     告诉服务器HTTP客户端网络代理程序的版本信息，一般就是浏览器的版本信息
    Authorization  告知服务器客户端的Web认证信息
    Content-Length HTTP报文中请求体的大小，以字节为单位
    Referer        告诉服务器该网页是从哪个页面链接过来，也就是上一个页面的地址
    Accept         指定客户端能够接收并理解的媒体类型（MIME类型），用于表达希望服务端的返回资源格式
    Accept-Encoding 指定浏览器可以支持的web服务器返回内容压缩编码类型
    Pragma         指定服务端控制缓存行为。http/1.0以前的字段
    Cache-Control  指定服务端控制缓存行为。http/1.1以后的字段
    Upgrade        向服务器请求在当前http协议的基础上升级采用新的某种传输协议以便服务器进行转换
    Connection     指定本次http通信结束以后，是否关闭TCP网络连接。如果设置持久连接，则可以在一次会话中，可以使用同一个TCP连接，进行多次的HTTP通信，提高效率

    注意：在http通信过程中，请求头也是可以自定义的，但是不能出现多字节编码字符，例如中文等
    
    常见的MIME格式：
    类型                           描述                 别名
    text/html                    HTML网页          
    application/json             json文本              text/json 
    text/plain                  纯文本，普通文本
    text/xml                       xml文档
    application/javascript         js脚步              text/javascript

    HTTP协议版本
    状态码：用于表达本次服务端在接收客户端请求之后的操作结果的成功或失败，由三位整数组成
    状态码             描述   
    1xx             告诉客户端，本次请求，服务端孩子持续处理，并没有结束
    2xx             告诉客户端，本次请求，服务端已经接收并成功受理了
    3xx             告诉客户端，服务端位置发生改变，希望客户端重定向访问跳转新的服务器地址进行请求
    4xx             告诉客户端，本次请求有误，服务器无法处理
    5xx             告诉客户端，本次请求服务端在处理过程中服务端出错了

    常见的HTTP状态码
    状态码              响应信息            描述
    101             switching protocol    服务器已经理解了客户端的请求，并将通过upgrade消息头通知客户端采用升级协议来完成请求
    200                 ok                请求已成功，请求所希望的响应头或数据体将随此响应返回，出现此状态码是表示正常状态
    201                 created           请求已成功，请求的资源已经创建成功或更新完成。常用于post，put或patch
    204                 NO content        请求已成功，但是没有任何内容返回，常用于delete
    301             moved permanently     永久重定向，表示当前客户端请求额资源地址已经永久发生改变
    302             move temporarily      临时重定向，表示当前客户端请求的资源地址还存在，但是访问客户端达不到访问资源的条件，所以暂时无法访问
    400             bad request           本次请求，报文含义有误或请求参数有误，当前请求无法被服务器理解
    401             unauthorized          本次请求，需要用户验证，但用户并没有提供认证
    403             forbidden             服务器已经理解请求，但拒绝执行，一般是因为没有权限导致的
    404             not found             请求失败，请求所希望得到的资源未被在服务器上发现，请求路径不存在
    502             bad gateway           网关宕机，作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。一般就是大量的访问请求导致服务器瘫痪或宕机
    504             gateway               网关超时


MVC设计模式
    M-model：数据模型  用来操作数据库
    V-view ：视图     用来进行数据的可视化
    C-controller：控制器   用来进行数据的逻辑操作

    交互流程
    1.前端view视图里面页面--发送请求，给后台后端
    2.控制器来接收请求controller --> 处理业务逻辑（1、判断路由 2.解析参数 3.对接model  4.返回数据）
    3.Model--交互数据库--返回数据给C
    4.C吧数据传给V展示

MVT设计模式
    Django主要采用MVT模式
    M-model：模型，操作数据库功能部门
    V-view：视图，处理业务逻辑的位置，提取数据，获取用户数据等操作
    T-Template：模版，用来展示视图，操作后的数据，也可以在模版中为用户提供表单，让用户可以提交数据

    交互流程
    1.发送请求--django框架-- V--处理主业务逻辑（1.判断路由 2.解析参数 3.对接Model 4.返回数据）
    2.V--获取数据--Model（交互数据库）
    3.Model -->V 
    4.V-->数据-- Template--模版
    5.Template--模版--数据渲染-- V--展示--客户端


路由入门
Route路由，是一种映射关系，路由是把客户端请求的url地址和用户请求的应用程序【这里指django里面的视图】进行一对一绑定映射的关系。
    
    视图基础
    Django的视图主要有2种写法，分别是函数视图和类视图
        函数视图
        django中所有的视图都建议编写在子应用的views.py文件中
        from django.http.response import HttpResponse
        def 函数视图名称(request):
            # 代码
            return HttpResponse(“返回内容”)
        
        函数视图名称，同一个模块下不能重复，同时采用变量命名规则

    请求
        视图中的request，实际上是django源码中的HTTPRequest的子类WSGIRequest类的实例对象，主要由django对客户端请求的http协议报文进行解析后得到的请求相关数据都在request对象中

        限制http请求
        web项目运行在http协议下，默认肯定也支持用户通过不同的http请求方法发送数据到服务端。常用http请求方法
        http请求方法          描述
        POST                 添加/上传
        get                  获取/下载
        put                  修改/更新，修改整体
        patch                修改/更新，修改部分
        delete               删除/废弃
        
        django支持让客户端只能通过指定的http请求来访问到项目的视图
        home/views.py，代码

    视图接收http请求
    QueryDict的声明位置：from django.http import QueryDict
    QueryDict常用方法有2个：
    get（键，默认值） 通常指定键获取最后1个值
    getlist(键)   通常指定键获取所有值，并以列表格式返回

    获取请求体数据
    在各种http请求方法中，post/put/patch都可以设置请求体。request.post中获取客户端通过post发送过来的请求体，无法获取put/patch的请求体

    请求头：request.META 
    server_name：服务端系统名称
    server_port：服务端的运行端口
    remote_host：客户端所在IP地址
    remote_add：客户端所在的iP地址
    server_software：服务端运行web服务器的软件打印信息
    path_info：客户端本次请求时的url路径


响应
    视图响应数据
    django和大多数的web框架一样，针对http的响应，提供了2种不同的响应方式：
    1.响应内容，就是直接返回数据给客户端
        a.响应http内容【一般用于web前后端不分离的项目】
        b.响应json内容【一般用于开发web前后端分离的项目的api接口开发】
    2.响应页面跳转，就是通过返回页面跳转的信息给浏览器，让浏览器自己进行页面跳转

    返回HTML数据
    代码：
    def index5(request):

    """ 响应： html数据 """
    return HttpResponse("content=正文内容", content_type="内容格式", status="http响应状态码")
    content        响应内容
    content_type   内容格式默认是text/html
    status         响应状态码，默认是200
    headers        响应头，字典格式

页面跳转
    页面跳转也有2种方式：站外跳转与站内跳转

会话控制技术
    主要作用：为了识别和记录用户在web应用中的身份行为和操作历史
    会话的单词：session，所谓一次会话就是客户端和服务端之间进行通信的一次完整过程
    在web项目中：
        客户端和服务端之间产生的会话开始于：在用户第一次输入url访问网站的时候
        客户端和服务端之间的会话结束于关闭浏览器
    注：如果在移动端下面，则必须关闭当前app应用才算结束，如果只是后台运行，会话并没有结束
    所以会话跟踪技术就是在一次完整的会话中，能让服务端识别客户端在整个过程中的身份行为和操作历史的一项技术

    实现会话控制的几种技术类型：
    1.url地址栏记录用户身份的参数【少见，很古老的技术，例如：QQ邮箱，QQ空间】
    2.cookie：在浏览器中由浏览器自动读写保存用户信息的一种小文件，能够存储的数据有限，30M左右【过时了，谷歌在2021开始慢慢关闭这个cookie技术了】
    3.session：在服务端中保存用户信息的一种小文件，能够存储的数据有限，根据服务端配置而定。session默认是基于cookie的
    4.token令牌：就是一段可以记录和识别用户身份的字符串，通过客户端语言【js/安卓/ios】保存在客户端中一项技术，替代cookie或session

视图接收http请求
    在http请求和响应过程中，用户往往会在请求过程中发送请求信息给服务端。那么客户端发送请求数据一般无非以下几种格式：
    1.查询字符串[query string]
        所谓的查询字符串就是url地址上面？号后面的数据，例如：
        http://127.0.0.1:8000/home/index/?name=xiaoming&pwd=123
        上面name=xiaoming&pwd=123就是查询字符串
        可以通过request.Get来获取
        注意：request.Get不是http请求，也就是说，只要地址上查询字符串，不管使用什么样的http请求方法，都可以在视图中使用request.Get来获取参数
    2.请求体数据
        获取请求体数据
        在各种http请求方法中，post/put/patch都可以设置请求体的。request.Post中获取客户端通过post发送过来的表单数据，无法获取put/patch的请求体
    3.请求头报文信息
        request.META：获取当前项目相关的服务器与客户端环境信息，也包含请求头信息，以及服务端所在的系统环境变量
        request.headers：获取http请求头
        常见的请求头：
            server_name：服务端系统名称
            server_port：服务端的运行端口
            remote_addr：客户端的所在IP地址
            server_software：服务端运行web服务器的软件打印信息
            path_info：客户端本次请求时的url路径
    4.上传文件


session【掌握】
    session：会话控制技术的一种，session主要把用户状态信息保存在服务器的文件中
    在没有进行特殊设置的情况下，session以文件格式保存状态数据，一般保存在目录是系统的缓存文件存储目录
    例如：windows的C:/windows/temp目录，Linux/MAC OS的/temp目录
    因为session是在服务端中保存数据，相对而言比cookie要安全，但是因为用户的数据都保存到服务器中，当用户基数大了，则服务器的存储压力就上来了。
    所以不会考虑把session数据保存在文件，而是采用的第三方设置存储session的方案，例如保存到redis或者mysql之类的数据库里面
    注意：三种常用的存储引擎：myisam,innodb,momery
    

路由进阶
    在django中所有的路由最终都被保存到一个变量urlpatterns.urlpatterns必须声明在主应用下的urls.py总路由中，这是由配置文件settings设置的ROOT_URLCONF指定的。
    在django运行中，当客户端发送一个http请求到服务端，服务端的web服务器则会从http协议中提取url地址，从程序内部找到项目中添加到urlpatterns里面的所有路由信息的url进行遍历匹配。
    如果相等或者匹配成功，则调用当前url对应的视图方法
    在给urlpatterns路由列表添加路由的过程中，django一共提供2个函数用于绑定路由与视图关系
    from django.urls import path      # 普通路由
    from django.urls import re_path   # 正则路由，会把url地址看成一个正则模式与客户端的请求url地址进行正则匹配

    path和re_path使用参数一致，仅仅在url参数和接收参数时写法不一样
    如果在版本小于django2.0，只有一个django.urls.url函数用于注册路由，url不仅支持path普通路由，也支持re_path正则路由

路由转换器：
    也叫路由验证器，有2个作用：
    1.把路由参数进行类型转换
    2.可以起到验证路由匹配的作用（让字符串路由path发挥正则路由re_path的作用）

    自定义路由转换器
    实际上就是django在对路由进行数据转换和简写正则路由的实现，这种实现方式是基于不同的转换器类来完成，开发者要实现自定义转换器，需要编写的类必须符合官方要求的3个基本要求：
    1.必须以类格式编写
    2.必须声明属性和方法：regex和方法：to_python,to_url
    3.必须通过register_converter(转换器类名，“别名”)进行注册才能被调用

配置文件：
    官方文档：https://docs.djangoproject.com/zh-hans/4.2/ref/settings/
    在django中默认的核心包里面存在一个全局默认配置文件django/conf/global_settings.py，同时在开发者构建项目的时候，也生成一个全局项目配置文件在主应用目录下/setting.py文件中
    这两个配置文件，在django项目运行时，django会先加载global_settings.py中的所有配置项到django.conf.settings对象中作为配置项存在，接着加载主应用目录下/setting.py的配置项，
    所以settings.py中填写的配置项的优先级会高于global_settings.py的默认配置。


模版语法
    Django的DTL或jinja2模版引擎提供的语法无非4中格式不同的语法，分别是变量，注释，标签，过滤器
    变量：{{变量}}
    注释：{#单行注释#}
    多行注释：{% comment %} 多行注释 {% endcomment %}
    标签：{% 标签名 %}  #单标签
         {% 开始标签 %} {% 结束标签 %}  #双标签

        if判断语句
            {% if name == a %}
                <p></p>
            {% elif user == b %}
            {% elif user == c %}
            {% else %}
            {% endif %}

        for循环语句
            {% for book in book_list %}
                <tr>
                    <td>{{book.id}}</td>
                    <td>{{book.name}}</td>
                    <td>{{book.price}}</td> 
                </tr>
            {% endfor %}

        循环标签中，模版引擎还提供了forloop对象，用于给开发者获取循环次数或者判断循环过程的
        属性                描述
        forloop.counter         显示循环的次数，从1开始
        forloop.counter0        显示循环的次数，从0开始
        forloop.revcounter0     倒数显示循环的次数，从0开始
        forloop.revcounter      倒数显示循环的次数，从1开始
        forloop.first           判断如果本次是循环的第一次，则结果为True
        forloop.last            判断如果本次是循环的最后一次，则结果为True
        forloop.parentloop      在多层嵌套循环中，指向当前循环的上级循环对象

    过滤器：本质就是函数可以是python函数，也可以是开发者自定义函数，常用语再变量或者标签
        单个无参过滤器，变量默认作为过滤器的第1个参数，过滤器中return的内容作为结果被输出
    {{变量|过滤器}}
        1)应用中创建了 templatetags 目录，并在其中有一个 Python 文件（例如 my_filters.py）。
        2)在 my_filters.py 中，确保你已正确注册了自定义标签。例如：
            from django import template
            register = template.Library()

            @register.filter
            def your_custom_filter(value):
            # 自定义过滤器的逻辑
                return modified_value
        3)模板文件中，加载标签库：
            {% load my_filters %}
        4)应用程序已添加到 INSTALLED_APPS 中，例如：
            INSTALLED_APPS = [
             ...
            'your_app',
             ...
            ]
        5)重启开发服务器

模版继承
    模版分离
        django中提供了{% include “模版文件名" %}标签模版分离技术
    模版继承
        {% extends "base.html" %}
        
视图进阶
    类视图
        新建一个子应用，cbv

    1.类视图必须直接或间接继承于django.views.view
    2.在django的类视图中，所有提供给外界用户访问的视图方法名必须是http请求动作的小写名称
        也就是说，方法名只能是get,post,put,patch,delete...
    3.使用类视图，可以有效的减少路由绑定的代码
        3.1可以直接通过视图方法名就可以达到限制客户端访问当前视图方法的http请求
        3.2客户端访问对应的URL地址就会来到视图中，访问这个地址所使用http请求，就是将来视图类自动执行的方法
        3.3有了类视图，可以把多个函数视图中原来的公共代码封装到一块进行调用，有利于代码复用

    类视图的路由分发原理
    可以通过postman来切换不同的http请求访问到同一个地址下不同的视图类方法中，这个主要原因是类视图的父类
    ‘django.views.View’中提供了dispatch的路由分发方法实现的
    这个路由分发方法，是开发者在给视图类绑定路由时调用了as_views()方法时进行注册调用的


数据库
    ORM框架
        ORM的优点
        ORM的缺点
    配置数据库连接
        在settings.py中保存了数据库的连接配置信息，Django默认初始化配置使用sqlite数据库
        可以通过以下步骤来使用django的数据库操作
        1.settings.py配置数据库连接信息
        2.在目标子应用下的models.py中定义模型类
        3.生成数据库迁移文件并执行迁移文件【注意：数据迁移是一个独立的用于创建数据表的功能，这个功能在其他web框架未必和ORM一块的】
            第三步非必要，有些公司直接由DBA（数据库管理员）设计与管理数据表的，那么就不需要在django中数据迁移了，直接撸代码
        4.通过模型类对象提供的方法或属性完成数据表的增删改查操作

    1.使用MySQL数据库首先需要安装驱动程序
        pip install PyMySQL
            # conda install -c conda-forge pymysql   # 如果上面命令安装失败，则可以使用以下命令安装
    
    2.在django的主应用目录的_init_.py文件中添加如下语句，Django/_init_.py代码：
    from pymysql import install_as_MySQLdb
    install_as_MySQLdb()    # 让mysql以mysqlDB的方式来对接ORM
    作用是让django的ORM能以mysqldb的方式来调用PyMySQL

    3.修改DBTABASES配置信息，settings.py配置文件配置数据库的连接信息。demo/settings.py
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

    'default': {
        'ENGINE': 'django.db.backends.mysql',    # ORM的底层对接pymysql的核心引擎类
        'NAME': 'school',          # 数据库名
        'USER': 'root',           # 账号
        'PASSWORD': '000000',     # 密码
        'HOST': '192.168.97.135',   # 数据库IP
        'PORT': '3306',             # 端口
        'POOL_OPTIONS': {         # pool表示数据库连接池配置，主要为了节省连接数据库的开发，临时存储数据库连接对象
            'POOL_SIZE': 10,      # 默认情况下，打开的数据库连接对象的数量【1，2，3，4，5，6，7，8，9，10】
            'MAX_OVERFLOW': 30,   # 负载情况下，允许溢出的连接数量 【11，12，13，14，15，16，17，18，19，20】
        }
    }
}

    4.在mysql中创建数据库
        create database school;     # mysql8.0以后默认是utf8mb4;
        create database school DEFAULT charset=utf8mb4;     # mysql8.0之前的版本

定义模型类
    模型类被定义在“子应用/models.py”文件中
    模型类必须直接或者间接继承于django.db.models.Model类
    
模型定义
    创建子应用student，注册子应用并引入子应用路由
        python manage.py startapp student
    settings.py代码：
        'student',
    demo/urls.py，总路由代码：
        path('student/', include("student.urls")),

    1）数据库名
        可通过Meta.db_table指明数据库表名
        模型类如果未指明表名Meta.db_table，django默认以小写子应用目录名_小写模型类名为数据库表名
    2）关于主键
        Django会为模型自动声明一个自动增长的主键列，每个模型只能有一个主键列
        如果使用选项设置某个字段的约束属性为主键列（primary_key）后，Django不会再创建自动增长的主键列
        class Student(models.Model):
            id = models.BigAutoField(primary_key=True, verbose_name="主键“)  
        默认创建的主键列属性名为id，也可以使用pk代替id,pk全拼为primary key
    4）字段类型
     文档：https://docs.djangoproject.com/zh-hans/4.2/ref/models/fields/#field-types
    5）约束选项
     文档：https://docs.djangoproject.com/zh-hans/4.2/ref/models/fields/#field-options
    6）外键约束

建表
    C02GG171ML85:demo bytedance$ python manage.py makemigrations
    C02GG171ML85:demo bytedance$ python manage.py migrate

数据迁移
    django中的数据迁移就是一个类，提供了一系列终端命令。数据迁移提供了简单的终端命令来实现，所以开发者不存在大的学习成本
    只有2个命令，分别是python manage.py makemigrations 与 python manage.py migrate

数据库基本操作
    CURD：create(创建)、update(更新)、read(读取)、delete(删除)

增加数据
    save：通过创建模型类对象，执行对象的save()方法保存到数据库中
    create：通过模型类objects.create()保存
    bulk_create：通过模型类objects.bulk_create()批量增加数据

查询数据
    get：查询单一结果，如果不存在或者返回多个结果会抛出异常
        查询不到，则返回模型类.DoesNotExit异常
        查询多个，则返回模型类.MultipleObjectsReturned异常
    
    first：查询一个结果，查询不到，则返回None，查询多个，返回查询结果列表的第一个
    all：查询所有结果，查询不到，则返回空列表对象

更新数据
    save：修改模型类对象的属性，然后执行save()方法同步到数据库中
    update：使用模型类.objects.filter().update()，基于update来完成更新满足条件的所有数据，结果是受影响的行数

删除数据
    删除有两种方法，分别是删一条或多条数据
    模型类对象.delete()
    模型类对象.objects.filter().delete()

数据库进阶操作
    过滤条件
        ORM在内部生成SQL中的where子句时，提供3个方法可以实现where过滤操作，包括：
            filter：过滤出符合条件的多个结果
            exclude：排除掉符合条件的多个结果，与filter相反，与filter互斥
            get：过滤单一结果，结果不是一个，会报错
        对于过滤条件的使用，上述三个方法相同，但是互斥，只能使用任意1个，故仅以filter进行练习
        文档：https://docs.djangoproject.com/zh-hans/4.2/ref/models/querysets/#field-lookups
        ORM使用过程中，设置查询过滤条件的表达语法，如下：
        # 单表的过滤
        模型类.objects.filter(属性名称__运算符=值)   # 是django的ORM提供的运算符
        模型类.objects.exclude(属性名称__运算符=值)
        模型类.objects.get(属性名称_运算符=值)
        # 多表的过滤
        模型类.objects.filter(外键属性名称_外键模型的属性名称_运算符=值)
        模型类.objects.exclude(外键属性名称_外键模型的属性名称_运算符=值)
        模型类.objects.get(外键属性名称_外键模型的属性名称_运算符=值)
        # 属性名称和比较运算符间使用两个英文下划线，所以之前声明模型类，规定了属性名不能包括多个下划线
    
    相等
        exact：表示判断值是否相等
    模糊查询 like "%_"
        contains：是否包含
        说明：如果要包含%无需转义，直接写即可

    范围查询
        in：是否包含在范围内

    取值范围
        range：设置开始值与结束值范围，进行数值判断，符合范围的数据被查询出来。不仅可以设置数值范围，也可以设置时间范围
    
    比较查询
        gt   大于
        gte  大于等于
        lt   小于
        lte  小于等于

    日期查询
        year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算


F对象
    F对象，主要用于在SQL语句中针对字段之间的值进行比较的查询
    之前的查询都是对象的属性与常量值比较，两个属性怎么比较呢？答：使用F对象，被定义在django.db.models中
    from django.db.models import F 
    # 查询出入学以后，数据没有被修改过的学生信息
    student_objs = models.Student.objects.filter(created_time=F("updated_time")).values("name","created_time","updated_time")
    print(student_objs)
    
    # 除了上面例子，还可以从工作中针对公司每月的营收（支出和收入）、股票（每月涨和跌）都可以使用F对象进行查询

Q对象 
    多个过滤器逐个调用表示逻辑与关系，同SQL语句中where部分的and关键字
    例如：查询年龄大于20

结果排序
    使用order_by对结果进行排序

限制查询
    ORM中针对查询结果的数量限制，提供了一个查询集对象[QuerySet]，这个QuerySet，是ORM中针对查询结果进行临时保存数据的一个容器对象，可以通过了解这个QuerySet进行使用，达到查询优化的目的，也或者“限制查询结果数量”的作用

查询集QuerySet
    查询集，也称查询结果集、QuerySet，表示从数据库中获取的对象集合
    当调用如下ORM提供的过滤器方法时，DJango会返回查询集（而不是简单的列表）
        all()：返回所有数据
        filter()：返回满足条件的数据，filter会默认调用all方法
        exclude()：返回满足条件之外的数据，exclude会默认调用all方法
        order_by()：对结果进行排序，order_by会默认调用all方法

QuerySet两大特性
    说明：开启mysql数据库日志有2种方式：
        临时开启，通过mysql交互终端临时设置，如果服务器重启或者mysql重启，则日志的配置信息还原
        永久开启，通过mysql的配置文件进行参数设置，将来即使服务器重启或mysql重启，都不会关闭日志功能
        设置的打印日志是输入临时开启，用于辅助学习，数据库关闭或重启以后就失效了

        --查看日志功能是否开启
            mysql> show variables like "%general_log%";
            mysql> set global general_log='ON';
            mysql> set global general_log_file='/var/lib/mysql/general.log';     --可以不设置日志路径，默认日志路径不要包含特殊字符也不要出现中文

    --mysql日志文件中时间一般跟系统时间是对不上的，原因是mysql的时区是0时区，中国是东八区
    mysql> select @@log_timestamps;   # UTC,0时区

    mysql> set global log_timestamps=SYSTEM;  #如果要永久设置，在上面配置文件中，添加log_timestamps=SYSTEM

聚合分组
    聚合函数
    Django中，可以使用aggregate()过滤器调用聚合函数。聚合函数包括：avg平均，count总数，max最大，min最小，sum求和，被定义在django.db.models中

    分组查询
    QuerySet对象.annotate()
    annotate()：进行分组统计，按values的字段进行group by
    annotate()：返回值依然是queryset对象，增加了分组统计后的键值对

    原生查询
    执行原生sql查询，在django中可以自己引入pymysql执行sql，也可以调用orm提供的raw方法来执行sql语句
    如果使用raw方法执行sql语句，则返回结果是queryset，这个返回结果在操作字段时，会有额外性能损耗

多库共存
    在django中，settings.py配置的Databases配置项允许注册多个数据库，当然也就支持在项目中随时切换操作不同的数据库

        




        



































    











































