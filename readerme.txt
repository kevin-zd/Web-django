
文件路径
    $ pwd
    /Users/bytedance/PycharmProjects/Web-django
    $ django-admin startproject demo

运行
   $ python manage.py runserver


5、创建工程
    1. cd 项目文件夹
    2. django-admin startproject 项目名称
    3. 运行
        python manager.py runserver

6、创建子应用APP

1.创建子应用
    cd 工程项目
    $ python manage.py startapp demoapp
    
2.注册应用
    seetings.py    --配置文件
    INSTALLED_APPS = [
    # 注册子应用
    'demoapp.apps.DemoappConfig'
    ]

7、创建视图
django的视图是定义在子应用的views.py中的
  1. 创建视图
  打开创建的应用模块，在views.py中编写视图代码
from django.http.response import HttpResponse

# 创建视图函数
def index(request):
    “”“
    index视图
    :param request：包含了请求信息的请求对象
    :return：响应对象
    ”“”
    # 返回响应对象
    return HttpResponse('这是第一个子应用的视图函数功能展示')
  2. 路由配置
    a.子应用
        创建urls.py
        定义路由
    b.工程总路由
        添加子路由

8、路由说明
1. 路由定义方式2
    a. 总路由-子路由
    b. 直接在总路由配置
2. 路由解析顺序
    从上到下匹配
    注意避免屏蔽路由
3. 路由命名
    name
4. reverse反解析
    a. 有namespace  
        reverse("namespace:name")
    b. 只有name
        reverse("name")

9、配置文件
1. base_dir：项目根路径
2. debug
    调试模式
    上线改成False
3. 本地化设置
    zh-hans
    Asia/Shanghai

10、静态文件
1. static_url：路由名字
2. staticfiles_dirs：静态资源文件夹的名字

3. staticfiles_dir：存放查找静态文件的目录
    static_url：访问静态文件的URL前缀

notes：django仅在调试模式下(debug=true)能对外提供静态文件
       当debug=false工作在生产模式时，django不再对外提供静态文件，需要用collectstatic命令
       来收集静态文件并交由其他静态文件服务器来提供。

11、请求对象request
1. 利用http协议向服务器传参有几种途径：
    a. 提取URL的特定部分，如/weather/beijing/2018，可以在服务端的路由中用正则表达式截取
    b. 查询字符串(query string)，形如key1=value1&key2=value2;
    c. 请求体（body）中发送的数据，比如表单数据、json、xml
    d. 在http报文的头（header）中

2. 传参的4种方式
    a.URL路径传参
    b.查询字符串
    c.请求体
    d.请求头header

2.1 URL 路径参数
    在定义路由URL时，可以使用正则表达式提取参数的方法从URL中获取请求参数，Django会将提取的参数直接传递到视图的传入参数中
    a. 未命名参数按定义顺序传递
    b. 命名参数按名字传递

    from django.urls import path
    from . import views

    urlpatterns = [
        path("articles/2003/", views.special_case_2003),
        path("articles/<int:year>/", views.year_archive),
        path("articles/<int:year>/<int:month>/", views.month_archive),
        path("articles/<int:year>/<int:month>/<slug:slug>/", views.article_detail),
    ]

    路径转换器：下面的路径转换器在默认情况下是有效的：
        str - 匹配除了 '/' 之外的非空字符串。如果表达式内不包含转换器，则会默认匹配字符串。
        int - 匹配 0 或任何正整数。返回一个 int 。
        slug - 匹配任意由 ASCII 字母或数字以及连字符和下划线组成的短标签。比如，building-your-1st-django-site 。
        uuid - 匹配一个格式化的 UUID 。为了防止多个 URL 映射到同一个页面，必须包含破折号并且字符都为小写。比如，075194d3-6885-417e-a8a8-6c931e272f00。返回一个 UUID 实例。
        path - 匹配非空字段，包括路径分隔符 '/' 。它允许你匹配完整的 URL 路径而不是像 str 那样匹配 URL 的一部分。

2.2 查询字符串query string
    定义在django.http.QueryDict：支持一键多值
    HttpRequest对象的属性GET、POST都是QueryDict类型的对象
    与python字典不同，QueryDict类型的对象用来处理同一个健带有多个值的情况
    a. 方法get()：根据键获取值
    b. 方法getlist()：根据键获取值，值以列表返回
    重要：查询字符串不区分请求方式，即假使客户端进行post方式的请求，依然可以通过request.get获取请求中的查询字符串数据

    获取请求路径中的查询字符串参数（形如?k1=v1&k2=v2），可以通过request.Get属性获取，返回queryDict对象
    ?key1=value1&key2=value2
    request.GET  
        get('key')  
        getlist('key')
        QueryDict：支持一键多值

2.3 请求体
    请求体数据格式不固定，可以是表单类型字符串，可以是JSON字符串，可以是XML字符串，应区别对待
    可以发送请求体数据的请求方式有post、put、patch、delete
    django默认开启了CSRF防护，会对上述请求方式进行CSRF防护验证，在测试时可以关闭CSRF防护机制，方法为在settings.py文件中注释掉CSRF中间件
    # 中间层 中间件
    MIDDLEWARE = [
    # 'django.middleware.csrf.CsrfViewMiddleware',
    ]

1. 表单类型 Form Data
    前端发送的表单类型的请求数据，可以通过request.post属性获取，返回querydict对象
    重要：request.post只能用来获取post方式的请求体表单数据
2. 非表单类型 Non-Form Data
    非表单类型的请求体数据，Django无法自动解析，可以通过request.body属性获取最原始的请求体数据，自己按照请求体格式（json、xml）进行解析。
    request.body返回bytes类型






    admin 000000






B站课程
快速使用
    在django中要提供数据展示给用户，需要完成3个步骤：
    1.创建子应用
    2.在子应用的视图文件views.py中编写视图函数
    3.把视图函数和url进行绑定注册到django项目
        用户就可以通过url地址访问，用户访问的时候，django自动根据url地址执行对应的视图函数

    1、创建子应用
        python manage.py startapp 子应用名称（目录）
        django-admin startapp 子应用名称
        子应用的名称将来会作为目录名而存在，务必按变量名的命名规则来创建，不能出现特殊符号，也不是不能出现中文等多字节的字符
        更不能以数字开头
    2、在子应用的视图文件中编写视图函数
        goods/views.py，代码
        from django.http.response import HttpResponse
        def index(request):
        # 业务代码，调用数据，for循环之类的
            data = "okkkkk!!!"
            return HttpResponse(data)
    3、绑定路由和视图的映射关系
        demo/urls.py，代码
        from django.contrib import admin
        from django.urls import path, include
        import demoapp.views
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('index', index),
        ]
    可以通过http://127.0.0.1:8000拼接url地址indeex来访问视图函数

网络知识
    http协议
    基本概念：http协议，即超文本传输协议，无状态网络应用协议，http协议构建于TCP/IP协议族之上，属于应用层协议。主要用于传输与超文本相关的资源文件，如HTML网页，css、js、图片、视频，音频等
    直接构建于TCP协议之上，没有进行加密传输数据的是HTTP协议，默认通信端口是80端口，常用的端口有：3000，5000，8000，8080等
    而构建于TLS或SSL协议之上，对数据使用SSL加壳加密传输数据的是HTTPS协议，默认通信端口是443端口，常用端口8443

    请求方法
    http请求方法（HTTP Request Method），表示客户端希望对服务器指定资源进行哪一种类型的操作，存在多种HTTP请求方法表达增删改。常见请求方法如下：
    请求方法       描述                                                                   报文中是否包含请求体
    get      表示客户端希望从服务器中获取或下载资源信息                                            false
    post     表示客户端希望上传文件或通过请求在服务区创建资源信息                                    True
    put      表示客户端希望修改或更新服务器资源（表示修改全部资源信息，例如数据表的一整个记录）           True
    patch    表示客户端希望修改或更新服务器资源（表示修改部分资源信息，例如数据表的一个记录里面某个属性值） True
    delete   表示客户端希望删除或废弃服务器资源                                                   false
    option   表示客户端希望获取服务器所支持的请求方法列表                                           false
    head     表示客户端希望获取服务器支持的跨域地址列表                                             false

    请求路径
    表示远程web服务器的一个可访问资源，一般就是代表的一个服务器具体文件或数据表中的记录信息，或一个服务端里面的函数或方法

    请求头
    HTTP请求头（Request Head），主要对客户端请求操作进行限制条件并补充说明。常见的标准HTTP请求头如下：
    选项                描述                                                              值
    Host           指定客户端请求的服务器的域名和端口号                                   www.baidu.com
    Content-Type   告诉服务器，客户端请求携带的请求体数据的媒体类型信息(MIME类型)
    User-Agent     告诉服务器HTTP客户端网络代理程序的版本信息，一般就是浏览器的版本信息
    Authorization  告知服务器客户端的Web认证信息
    Content-Length HTTP报文中请求体的大小，以字节为单位
    Referer        告诉服务器该网页是从哪个页面链接过来，也就是上一个页面的地址
    Accept         指定客户端能够接收并理解的媒体类型（MIME类型），用于表达希望服务端的返回资源格式
    Accept-Encoding 指定浏览器可以支持的web服务器返回内容压缩编码类型
    Pragma         指定服务端控制缓存行为。http/1.0以前的字段
    Cache-Control  指定服务端控制缓存行为。http/1.1以后的字段
    Upgrade        向服务器请求在当前http协议的基础上升级采用新的某种传输协议以便服务器进行转换
    Connection     指定本次http通信结束以后，是否关闭TCP网络连接。如果设置持久连接，则可以在一次会话中，可以使用同一个TCP连接，进行多次的HTTP通信，提高效率

    注意：在http通信过程中，请求头也是可以自定义的，但是不能出现多字节编码字符，例如中文等
    
    常见的MIME格式：
    类型                           描述                 别名
    text/html                    HTML网页          
    application/json             json文本              text/json 
    text/plain                  纯文本，普通文本
    text/xml                       xml文档
    application/javascript         js脚步              text/javascript

    HTTP协议版本
    状态码：用于表达本次服务端在接收客户端请求之后的操作结果的成功或失败，由三位整数组成
    状态码             描述   
    1xx             告诉客户端，本次请求，服务端孩子持续处理，并没有结束
    2xx             告诉客户端，本次请求，服务端已经接收并成功受理了
    3xx             告诉客户端，服务端位置发生改变，希望客户端重定向访问跳转新的服务器地址进行请求
    4xx             告诉客户端，本次请求有误，服务器无法处理
    5xx             告诉客户端，本次请求服务端在处理过程中服务端出错了

    常见的HTTP状态码
    状态码              响应信息            描述
    101             switching protocol    服务器已经理解了客户端的请求，并将通过upgrade消息头通知客户端采用升级协议来完成请求
    200                 ok                请求已成功，请求所希望的响应头或数据体将随此响应返回，出现此状态码是表示正常状态
    201                 created           请求已成功，请求的资源已经创建成功或更新完成。常用于post，put或patch
    204                 NO content        请求已成功，但是没有任何内容返回，常用于delete
    301             moved permanently     永久重定向，表示当前客户端请求额资源地址已经永久发生改变
    302             move temporarily      临时重定向，表示当前客户端请求的资源地址还存在，但是访问客户端达不到访问资源的条件，所以暂时无法访问
    400             bad request           本次请求，报文含义有误或请求参数有误，当前请求无法被服务器理解
    401             unauthorized          本次请求，需要用户验证，但用户并没有提供认证
    403             forbidden             服务器已经理解请求，但拒绝执行，一般是因为没有权限导致的
    404             not found             请求失败，请求所希望得到的资源未被在服务器上发现，请求路径不存在
    502             bad gateway           网关宕机，作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。一般就是大量的访问请求导致服务器瘫痪或宕机
    504             gateway               网关超时


MVC设计模式
    M-model：数据模型  用来操作数据库
    V-view ：视图     用来进行数据的可视化
    C-controller：控制器   用来进行数据的逻辑操作

    交互流程
    1.前端view视图里面页面--发送请求，给后台后端
    2.控制器来接收请求controller --> 处理业务逻辑（1、判断路由 2.解析参数 3.对接model  4.返回数据）
    3.Model--交互数据库--返回数据给C
    4.C吧数据传给V展示

MVT设计模式
    Django主要采用MVT模式
    M-model：模型，操作数据库功能部门
    V-view：视图，处理业务逻辑的位置，提取数据，获取用户数据等操作
    T-Template：模版，用来展示视图，操作后的数据，也可以在模版中为用户提供表单，让用户可以提交数据

    交互流程
    1.发送请求--django框架-- V--处理主业务逻辑（1.判断路由 2.解析参数 3.对接Model 4.返回数据）
    2.V--获取数据--Model（交互数据库）
    3.Model -->V 
    4.V-->数据-- Template--模版
    5.Template--模版--数据渲染-- V--展示--客户端


路由入门
Route路由，是一种映射关系，路由是把客户端请求的url地址和用户请求的应用程序【这里指django里面的视图】进行一对一绑定映射的关系。
    
    视图基础
    Django的视图主要有2种写法，分别是函数视图和类视图
        函数视图
        django中所有的视图都建议编写在子应用的views.py文件中
        from django.http.response import HttpResponse
        def 函数视图名称(request):
            # 代码
            return HttpResponse(“返回内容”)
        
        函数视图名称，同一个模块下不能重复，同时采用变量命名规则

    请求
        视图中的request，实际上是django源码中的HTTPRequest的子类WSGIRequest类的实例对象，主要由django对客户端请求的http协议报文进行解析后得到的请求相关数据都在request对象中

        限制http请求
        web项目运行在http协议下，默认肯定也支持用户通过不同的http请求方法发送数据到服务端。常用http请求方法
        http请求方法          描述
        POST                 添加/上传
        get                  获取/下载
        put                  修改/更新，修改整体
        patch                修改/更新，修改部分
        delete               删除/废弃
        
        django支持让客户端只能通过指定的http请求来访问到项目的视图
        home/views.py，代码

    视图接收http请求
    QueryDict的声明位置：from django.http import QueryDict
    QueryDict常用方法有2个：
    get（键，默认值） 通常指定键获取最后1个值
    getlist(键)   通常指定键获取所有值，并以列表格式返回

    获取请求体数据
    在各种http请求方法中，post/put/patch都可以设置请求体。request.post中获取客户端通过post发送过来的请求体，无法获取put/patch的请求体

    请求头：request.META 
    server_name：服务端系统名称
    server_port：服务端的运行端口
    remote_host：客户端所在IP地址
    remote_add：客户端所在的iP地址
    server_software：服务端运行web服务器的软件打印信息
    path_info：客户端本次请求时的url路径


响应
    视图响应数据
    django和大多数的web框架一样，针对http的响应，提供了2种不同的响应方式：
    1.响应内容，就是直接返回数据给客户端
        a.响应http内容【一般用于web前后端不分离的项目】
        b.响应json内容【一般用于开发web前后端分离的项目的api接口开发】
    2.响应页面跳转，就是通过返回页面跳转的信息给浏览器，让浏览器自己进行页面跳转

    返回HTML数据
    代码：
    def index5(request):

    """ 响应： html数据 """
    return HttpResponse("content=正文内容", content_type="内容格式", status="http响应状态码")
    content        响应内容
    content_type   内容格式默认是text/html
    status         响应状态码，默认是200
    headers        响应头，字典格式


























    











































